
1-1. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/1.initialization.yaml 실행

1-2. HyperCloud CRDs Definition Yaml 적용
	- Auth/UserCRD.yaml
	- Auth/UsergroupCRD.yaml
	- Auth/TokenCRD.yaml
	- Auth/ClientCRD.yaml
	- Auth/UserSecurityPolicyCRD.yaml
	- Claim/NamespaceClaimCRD.yaml
	- Claim/ResourceQuotaClaimCRD.yaml
	- Claim/RoleBindingClaimCRD.yaml
	- Registry/RegistryCRD.yaml
	- Registry/ImageCRD.yaml
	- Template/TemplateCRD_v1beta1.yaml
	- Template/TemplateInstanceCRD_v1beta1.yaml

2. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/2.mysql-settings.yaml 실행

3. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/3.mysql-create.yaml 실행

4. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/4.proauth-db.yaml 실행

4-1. proauth-db는 최초로 기동시 20~30분 정도가 소요될 수 있음.
  * proauth-db 기동 확인
  	1) kubectl get pod -n proauth-system 명령어를 통해 뜨고 있는 proauth-db pod 이름을 복사한다. Ex) proauth-db-deployment-7bcbf5dc5b-gllhp
  	2) Ex) kubectl exec -it proauth-db-deployment-7bcbf5dc5b-gllhp -n proauth-system bash 명령어를 통해 proauth-db pod로 접속한다.
  	3) /tibero 경로에 있는 cmdlog를 확인한다.
  	4) SQL> SQL>    2    3    4    5    6    7    8    9   10   11   12
		Table 'OAUTH.PO_SCHEDULE_TARGET' created.
	   SQL> SQL>
		1 row inserted.
	   SQL> SQL> Disconnected.
	   등으로 끝나는 default table을 만들어주는 로그가 있으면 완료가 된것

4-2. Host OS가 CentOS 일때
  * 1) proauth-db.yaml 의 주석 부분을 해제해주고 적용시킨다
  	2) kubelet 설정에서도 적용해주어야 함
		/var/lib/kubelet/kubeadm-flags.env 에 --allowed-unsafe-sysctls=kernel.sem 추가
		kubelet 재기동 (systemctl daemon-reload && systemctl restart kubelet)     	

5. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/5.proauth-server.yaml 실행 ( node Selector 설정 : proauth db pod와 같은 node로 설정 )

6. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/6.hypercloud4-operator.yaml 실행

7. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/7.secret-watcher.yaml 실행

8. http://192.168.1.150:10080/hypercloud/hypercloud-operator/blob/master/_yaml_Install/8.default-auth-object-init.yaml 실행

9. authenticate webhook 설정 (http://192.168.1.150:10080/hypercloud/hypercloud-operator/wikis/WebHook-Guide)

10. hypercloud4-operator userCreate 서비스를 이용해서 지워줬던 user를 추가 생성할 수 있다. ( 통합 회원가입 페이지가 나오기 전까지 )
  1) POST http://192.168.6.149:28677/user ( hypercloud4-operator로 call 을 해야한다)
       {
		  "id": "test-user",
		  "name": "test",
		  "password": "c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec",
		  "email": "test-user@tmax.co.kr",
		  "phone": "000-0000-0000"
	   }
  2) id와 비밀번호는 분리 되었으므로 형식을 맞출 필요가 더이상 없지만 위의 예시는 기존에 생성되어있던 admin@tmax.co.kr 의 설정을 그대로 쓰기 위함이다.
  3) id는 k8s의 metadata Name으로 들어가기 때문에, 대부분의 특수 문자를 더이상 사용할 수 없다.	   
  3) password는 현재 ui가 나오지 않은 상황이기 때문에 원하는 password를 sha-512 해슁을 진행 ( https://www.convertstring.com/ko/Hash/SHA512 이용)
  4) 소문자를 넣어 줘야 하므로 비밀번호를 모두 소문자로 만들어준다. (http://mwultong.blogspot.com/2007/12/case-converter.html 이용 )
      * 위의 예시는 "admin"을 해쉬 하고 소문자로 만든 결과이다.
      
11. id / password(해쉬 하기전 ) 으로 로그인이 가능해진다.      
  

