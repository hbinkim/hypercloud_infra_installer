apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: namespaceclaims.tmax.io
spec:
  group: tmax.io
  versions:
  - name: v1
    served: true
    storage: true
  scope: Cluster
  names:
    plural: namespaceclaims
    singular: namespaceclaim
    kind: NamespaceClaim
    shortNames:
    - nsc
  preserveUnknownFields: true
  validation:
    openAPIV3Schema:
        # Users use namespaceclaim to request namespace and quotas.
        # The spec of namespaceclaim is the same as resourcequota.
        # Admins can change the 'status' of the namespaceclaim.
        # If Admin change the Status to 'Success', a namespace and resourcequota are created.
        type: object
        required: [resourceName,apiVersion,kind,metadata,spec]
        properties:
          resourceName:
            type: string
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
            properties:
              name:
                type: string
          spec:
            # Equal Resource Quota Spec
            description: ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
            type: object
            properties:
              hard:
                description: 'hard is the set of desired hard limits for each named resource.
                  More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/'
                type: object
                additionalProperties:
                  description: |-
                    Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and Int64() accessors.

                    The serialization format is:

                    <quantity>        ::= <signedNumber><suffix>
                      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
                    <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
                      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
                    <decimalSI>       ::= m | "" | k | M | G | T | P | E
                      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
                    <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

                    No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.

                    When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.

                    Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
                      a. No precision is lost
                      b. No fractional digits will be emitted
                      c. The exponent (or suffix) is as large as possible.
                    The sign will be omitted unless the number is negative.

                    Examples:
                      1.5 will be serialized as "1500m"
                      1.5Gi will be serialized as "1536Mi"

                    Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.

                    Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)

                    This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
                  type: string  
              scopeSelector:
                description: scopeSelector is also a collection of filters like scopes that
                  must match each object tracked by a quota but expressed using ScopeSelectorOperator
                  in combination with possible values. For a resource to match, both scopes
                  AND scopeSelector (if specified in spec), must be matched.
                type: object
                properties:
                  matchExpressions:
                    description: A list of scope selector requirements by scope of the resources.
                    type: array
                    items:
                      type: object
                      required:
                      - scopeName
                      - operator
                      properties:
                        operator:
                          description: Represents a scope's relationship to a set of values. Valid operators
                            are In, NotIn, Exists, DoesNotExist.
                          type: string
                        scopeName:
                          description: The name of the scope that the selector applies to.
                          type: string
                        values:
                          description: An array of string values. If the operator is In or NotIn, the
                            values array must be non-empty. If the operator is Exists or DoesNotExist,
                            the values array must be empty. This array is replaced during a strategic
                            merge patch.
                          type: array
                          items:
                            type: string
              scopes:
                description: A collection of filters that must match each object tracked by
                  a quota. If not specified, the quota matches all objects.
                type: array
                items:
                  type: string
          status:
            type: object
            properties:
              lastTransitionTime:
                format: date-time
                type: string
              message:
                type: string
              reason:
                type: string
              status:
                type: string
                enum:
                  - Awaiting
                  - Success
                  - Reject
                  - Error
  additionalPrinterColumns:
  - name: Status
    type: string
    JSONPath: .status.status
  - name: Reason
    type: string
    JSONPath: .status.reason
  subresources:
    status: {}